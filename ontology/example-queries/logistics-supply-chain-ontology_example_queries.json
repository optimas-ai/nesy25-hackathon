[
    {
        "id": "Q1",
        "question": "List all DisruptionEvents and their delay durations.",
        "canonical_query": "DisruptionEvent :delayDuration",
        "rationale": "Direct retrieval of data property from DisruptionEvent class.",
        "expected_answer": [
            {
                "delayHours": 24,
                "eventId": "EVT001"
            }
        ]
    },
    {
        "id": "Q2",
        "question": "Find Shipments transported by Trucks and their transport costs.",
        "canonical_query": "Shipment :transportedBy Truck; Shipment :transportCost",
        "rationale": "Filter Shipments by subclass of Vehicle (Truck) via object property; retrieve cost attribute.",
        "expected_answer": [
            {
                "shipmentId": "SHP001",
                "transportCost": 1500.75
            }
        ]
    },
    {
        "id": "Q3",
        "question": "List Packages in delayed Shipments with fragility level 'High' and their weights.",
        "canonical_query": "Shipment :delayed true (inferred); Shipment :contains Package; Package :fragilityLevel 'High'; Package :packageWeight",
        "rationale": "Use inferred 'delayed' from causality; traverse contains relationship; filter and retrieve attributes.",
        "expected_answer": [
            {
                "packageId": "PKG003",
                "weight": 10.2
            }
        ]
    },
    {
        "id": "Q4",
        "question": "Aggregate total transport cost of Shipments generated by Orders from high-priority Customers.",
        "canonical_query": "Customer :customerPriority 'High'; Customer :triggersOrder Order; Order :generates Shipment; SUM(Shipment :transportCost)",
        "rationale": "Join customer priority, triggersOrder, generates; aggregate costs with SUM.",
        "expected_answer": [
            {
                "totalCost": 1500.75
            }
        ]
    },
    {
        "id": "Q5",
        "question": "Trace causal chain: Find Routes operated by Vehicles delayed by Disruptions, including affected Schedules and backup dates.",
        "canonical_query": "DisruptionEvent :causesDelay Shipment; Shipment :transportedBy Vehicle; Vehicle :operatesOn Route; DisruptionEvent :affectsSchedule DeliverySchedule (inferred delayedSchedule); DeliverySchedule :backupDeliveryDate",
        "rationale": "Multi-hop join across causesDelay, transportedBy, operatesOn, affectsSchedule; use inferred delayedSchedule from rule; retrieve backup dates.",        
        "expected_answer": [
            {
                "backupDate": "2025-08-16T14:00:00Z",
                "eventId": "EVT001",
                "routeId": "RTE001",
                "scheduleId": "SCH001",
                "vehicleId": "VEH001"
            }
        ]
    }
]